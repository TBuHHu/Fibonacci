//
//  ViewController.swift
//  Fibonacci
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò—Å–º–∞–∏–ª–æ–≤ on 11/08/2019.
//  Copyright ¬© 2019 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò—Å–º–∞–∏–ª–æ–≤. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UITextFieldDelegate {
    @IBOutlet weak var stepField: UITextField!
    @IBOutlet weak var resultField: UITextView!
    @IBOutlet weak var infoLabel: UILabel!
    @IBOutlet weak var reverseResult: UISwitch!
    
    let defaultMessageInfoLabel = "About Program:"
    let defaultMessageResultField = "üî≤ The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21,34...\n\nüî≤ The next number is found by adding up the two numbers before it:\n‚ñ´Ô∏è The 2 is found by adding the two numbers before it (1+1)\n‚ñ´Ô∏è The 3 is found by adding the two numbers before it (1+2)\n‚ñ´Ô∏è And the 5 is (2+3)\n‚ñ´Ô∏è and so on!\n\nüî≤ For calculating enter a step and tap on squares."
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //–ß—Ç–æ–±—ã –∫–ª–∞–≤–∞ –¥–≤–∏–≥–∞–ª–∞ textField
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        resultField.setContentOffset(.zero, animated: false) //–ß—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è UITextView –æ—Ç–æ–±—Ä–∞–∂–∞–ª —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É, –∞ –Ω–µ —Å–Ω–∏–∑—É
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        if ((notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue) != nil {
            if self.view.frame.origin.y == 0 {
                self.view.frame.origin.y -= 290
            }
        }
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        if self.view.frame.origin.y != 0 {
            self.view.frame.origin.y = 0
        }
    }
    
    //–ö–æ–≥–¥–∞ –∫–∞—Å–∞–µ—à—å—Å—è —ç–∫—Ä–∞–Ω–∞ –≤–Ω–µ textField - —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤—É
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        stepField.resignFirstResponder()
        getResult((Any).self) //+ –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
//    //–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ return –Ω–∞ –∫–ª–∞–≤–µ
//    func textFieldShouldReturn(_ stepField: UITextField) -> Bool {
//        getResult((Any).self)
//        return true
//    }
    
    //–ü–æ—à–ª–∞ –¥–≤–∏–∂—É—Ö–∞
    func getResult(_ sender: Any) {
        stepField.resignFirstResponder()
        
        //–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        func showAlert(_ title: String, _ message: String) {
            infoLabel.text = defaultMessageInfoLabel
            resultField.text = defaultMessageResultField
            let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
            let action = UIAlertAction(title: "I understand.", style: .default)
            alert.addAction(action)
            present(alert, animated: true, completion: nil)
            resultField.scrollRangeToVisible(NSRange(location:0, length:0))
        }
        
        //–°–∞–º–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        var counter = Int(stepField.text!)
        var resultNumbers: [Int] = [1, 1]
        
        if !stepField.hasText {
            showAlert("Really? ;)", "I can't multiply on nothing!")
        }
        else if counter! <= 2 {
            showAlert("I'm sorry but...", "Minimum possible step is 3.")
        }
        else if counter! >= 93 {
            showAlert("Holy sh*t!", "Maximum possible step is 92.")
        } else {
            for _ in 3...counter! {
            let newLastValue = resultNumbers[resultNumbers.endIndex - 1] + resultNumbers[resultNumbers.endIndex - 2]
                resultNumbers.append(newLastValue)
            }
            
            if reverseResult.isOn {
                resultNumbers = resultNumbers.reversed()
            }
            
            let resultNumbersString = resultNumbers.map { String($0) }
            var resultAsString = ""
            var resultCounter = 0
            
            for nextValue in resultNumbersString {
                resultCounter += 1
                resultAsString += ("Step \(resultCounter) - \(nextValue);\n")
            }
            
            func forInfoLabel(counterString: String) {
                infoLabel.text = "Result for step \(counterString):"
            }
            
            forInfoLabel(counterString: counter.map { String($0) }!)
            resultAsString.removeLast(2)
            resultAsString += "."
            print(resultAsString)
            resultField.text = resultAsString
        }
        
        stepField.text = nil
    
    }
}

